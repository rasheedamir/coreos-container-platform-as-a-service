{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "CoreOS on EC2: http://coreos.com/docs/running-coreos/cloud-providers/ec2/",
  "Mappings" : {
      "RegionMap" : {

          "eu-central-1" : {
              "AMI" : "ami-8ec1f293"
          },

          "ap-northeast-1" : {
              "AMI" : "ami-e85c46e9"
          },

          "sa-east-1" : {
              "AMI" : "ami-2de95630"
          },

          "ap-southeast-2" : {
              "AMI" : "ami-4dd3a777"
          },

          "ap-southeast-1" : {
              "AMI" : "ami-72dcf620"
          },

          "us-east-1" : {
              "AMI" : "ami-8297d4ea"
          },

          "us-west-2" : {
              "AMI" : "ami-f1702bc1"
          },

          "us-west-1" : {
              "AMI" : "ami-24b5ad61"
          },

          "eu-west-1" : {
              "AMI" : "ami-5d911f2a"
          }

      }
  },
  "Parameters": {
    "InstanceType" : {
      "Description" : "EC2 HVM instance type (m3.medium, etc).",
      "Type" : "String",
      "Default" : "m3.medium",
      "ConstraintDescription" : "Must be a valid EC2 HVM instance type."
    },
    "ClusterSize": {
      "Default": "1",
      "MinValue": "0",
      "MaxValue": "12",
      "Description": "Number of nodes in cluster (3-12).",
      "Type": "Number"
    },
    "DiscoveryURL": {
      "Description": "An unique etcd cluster discovery URL. Grab a new token from https://discovery.etcd.io/new",
      "Type": "String"
    },
    "AdvertisedIPAddress": {
      "Description": "Use 'private' if your etcd cluster is within one region or 'public' if it spans regions or cloud providers.",
      "Default": "private",
      "AllowedValues": ["private", "public"],
      "Type": "String"
    },
    "AllowSSHFrom": {
      "Description": "The net block (CIDR) that SSH is available to.",
      "Default": "0.0.0.0/0",
      "Type": "String"
    },
    "HostedZoneName" : {
      "Description" : "DNS domain name under which the DNS record are to be registered",
      "Type" : "String"
    },
    "KeyName" : {
      "Description" : "The name of an EC2 Key Pair to allow SSH access to the instance.",
      "Type" : "String"
    }
  },
  "Resources": {
    "AppLBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "application LoadBalancer SecurityGroup",
        "SecurityGroupIngress": [
          {"IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": "0.0.0.0/0" }
        ]
      }
    },
    "CoreOSSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "CoreOS SecurityGroup",
        "SecurityGroupIngress": [
          {"IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": {"Ref": "AllowSSHFrom"}}
        ]
      }
    },
    "Ingress4001": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupName": {"Ref": "CoreOSSecurityGroup"}, "IpProtocol": "tcp", "FromPort": "4001", "ToPort": "4001", "SourceSecurityGroupId": {
          "Fn::GetAtt" : [ "CoreOSSecurityGroup", "GroupId" ] 
        }
      }
    },
    "Ingress7001": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupName": {"Ref": "CoreOSSecurityGroup"}, "IpProtocol": "tcp", "FromPort": "7001", "ToPort": "7001", "SourceSecurityGroupId": {
          "Fn::GetAtt" : [ "CoreOSSecurityGroup", "GroupId" ] 
        } 
      }
    },
    "ConsulSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Consul Security Group"
      }
    },
    "Ingress8300": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupName": {"Ref": "ConsulSecurityGroup"}, "IpProtocol": "tcp", "FromPort": "8300", "ToPort": "8300", "SourceSecurityGroupId": {
          "Fn::GetAtt" : [ "ConsulSecurityGroup", "GroupId" ] 
        }
      }
    },
    "Ingress8301": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupName": {"Ref": "ConsulSecurityGroup"}, "IpProtocol": "tcp", "FromPort": "8301", "ToPort": "8301", "SourceSecurityGroupId": {
          "Fn::GetAtt" : [ "ConsulSecurityGroup", "GroupId" ] 
        }
      }
    },
    "Ingress8302": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupName": {"Ref": "ConsulSecurityGroup"}, "IpProtocol": "tcp", "FromPort": "8302", "ToPort": "8302", "SourceSecurityGroupId": {
          "Fn::GetAtt" : [ "ConsulSecurityGroup", "GroupId" ] 
        }
      }
    },
    "Ingress8400": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupName": {"Ref": "ConsulSecurityGroup"}, "IpProtocol": "tcp", "FromPort": "8400", "ToPort": "8400", "SourceSecurityGroupId": {
          "Fn::GetAtt" : [ "ConsulSecurityGroup", "GroupId" ] 
        }
      }
    },
    "Ingress8500": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupName": {"Ref": "ConsulSecurityGroup"}, "IpProtocol": "tcp", "FromPort": "8500", "ToPort": "8500", "SourceSecurityGroupId": {
          "Fn::GetAtt" : [ "ConsulSecurityGroup", "GroupId" ] 
        }
      }
    },
    "Ingress8600udp": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupName": {"Ref": "ConsulSecurityGroup"}, "IpProtocol": "udp", "FromPort": "8600", "ToPort": "8600", "SourceSecurityGroupId": {
          "Fn::GetAtt" : [ "ConsulSecurityGroup", "GroupId" ] 
        }
      }
    },
    "Ingress8301udp": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupName": {"Ref": "ConsulSecurityGroup"}, "IpProtocol": "udp", "FromPort": "8301", "ToPort": "8301", "SourceSecurityGroupId": {
          "Fn::GetAtt" : [ "ConsulSecurityGroup", "GroupId" ] 
        }
      }
    },
    "Ingress8302udp": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupName": {"Ref": "ConsulSecurityGroup"}, "IpProtocol": "udp", "FromPort": "8302", "ToPort": "8302", "SourceSecurityGroupId": {
          "Fn::GetAtt" : [ "ConsulSecurityGroup", "GroupId" ] 
        }
      }
    },

    "AppSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Application SecurityGroup",
        "SecurityGroupIngress": [
          {"IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": {"Ref": "AllowSSHFrom"}}
        ]
      }
    },
    "IngressAppNonPrivileged": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupName": {"Ref": "AppSecurityGroup"}, "IpProtocol": "tcp", "FromPort": "1024", "ToPort": "65535", "SourceSecurityGroupId": {
          "Fn::GetAtt" : [ "AppSecurityGroup", "GroupId" ] 
        }
      }
    },

    "AppLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "AvailabilityZones": {"Fn::GetAZs": ""},
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "5",
          "Target": "TCP:80",
          "Timeout": "2",
          "UnhealthyThreshold": "2"
        },
        "Listeners": [
          {
            "InstancePort": "80",
            "LoadBalancerPort": "80",
            "Protocol": "HTTP",
            "InstanceProtocol": "HTTP"
          }
        ]
      }
    },

    "AppDnsRecord": {
      "Type": "AWS::Route53::RecordSetGroup",
      "Properties": {
        "HostedZoneName": {"Ref": "HostedZoneName"},
        "RecordSets": [
          {
            "Name": { "Fn::Join" : [ "", [ { "Ref" : "KeyName" } , ".", {"Ref": "HostedZoneName"} ] ] },
            "Type": "CNAME",
            "TTL": "300",
            "ResourceRecords": [
               { "Fn::GetAtt" : [ "AppLoadBalancer" , "DNSName" ] }
            ]
          }
        ]
      }
    },

    "AppDnsRecord": {
      "Type": "AWS::Route53::RecordSetGroup",
      "Properties": {
        "HostedZoneName": "qbtest.net.",
        "RecordSets": [
          {
            "Name": { "Fn::Join" : [ "", [ "*.", { "Ref" : "KeyName" } , ".", {"Ref": "HostedZoneName"} ] ] },
            "Type": "CNAME",
            "TTL": "300",
            "ResourceRecords": [
               { "Fn::GetAtt" : [ "AppLoadBalancer" , "DNSName" ] }
            ]
          }
        ]
      }
    },

    "CoreOSServerAutoScaleConsulServer": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": {"Fn::GetAZs": ""},
        "LaunchConfigurationName": {"Ref": "CoreOSServerLaunchConfigConsulServer"},
        "LoadBalancerNames" : [ {"Ref": "AppLoadBalancer"} ],
        "MinSize": "3",
        "MaxSize": "5",
        "DesiredCapacity": "3",
        "Tags": [
            {"Key": "Name", "Value": { "Ref" : "AWS::StackName" }, "PropagateAtLaunch": true}
        ]
      }
    },
    "CoreOSServerLaunchConfigConsulServer": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
        "InstanceType": {"Ref": "InstanceType"},
        "KeyName": {"Ref": "KeyName"},
        "SecurityGroups": [{"Ref": "CoreOSSecurityGroup"}, {"Ref": "ConsulSecurityGroup"}, {"Ref": "AppSecurityGroup"} ],
        "UserData" : { "Fn::Base64":
          { "Fn::Join": [ "", [
            "#cloud-config\n\n",
            "coreos:\n",
            "  etcd:\n",
            "    discovery: ", { "Ref": "DiscoveryURL" }, "\n",
            "    addr: $", { "Ref": "AdvertisedIPAddress" }, "_ipv4:4001\n",
            "    peer-addr: $", { "Ref": "AdvertisedIPAddress" }, "_ipv4:7001\n",
            "  fleet:\n", 
            "    metadata: \"region=", { "Ref": "AWS::Region" }, ",consul_role=server\"\n",
            "  units:\n",
            "    - name: etcd.service\n",
            "      command: start\n",
            "    - name: fleet.service\n",
            "      command: start\n",
	    "    - name: consul-server.service\n",
	    "      command: start\n",
	    "      content: |\n",
	    "        [Unit]\n",
	    "        Description=Consul Server Agent\n",
	    "        After=docker.service\n",
	    "        After=etcd.service\n",
	    "        [Service]\n",
	    "        Restart=always\n",
	    "        RestartSec=60\n",
	    "        ExecStartPre=-/usr/bin/docker kill consul\n",
	    "        ExecStartPre=-/usr/bin/docker rm consul\n",
	    "        ExecStartPre=/usr/bin/docker pull progrium/consul\n",
	    "        ExecStart=/bin/sh -c \"eval $(. /etc/environment; /usr/bin/docker run --rm progrium/consul cmd:run $COREOS_PRIVATE_IPV4 -e SERVICE_IGNORE=true -v /var/run/docker.sock:/var/run/docker.sock)\"\n",
	    "        ExecStop=/usr/bin/docker stop consul\n",
	    "        [X-Fleet]\n",
	    "        MachineMetadata=consul_role=server\n",
	    "    - name: consul-server-announcer.service\n",
	    "      command: start\n",
	    "      content: |\n",
	    "        [Unit]\n",
	    "        Description=Consul Server Announcer\n",
	    "        PartOf=consul-server.service\n",
	    "        After=consul-server.service\n",
	    "        [Service]\n",
	    "        Restart=always\n",
	    "        RestartSec=30\n",
	    "        EnvironmentFile=/etc/environment\n",
	    "        ExecStart=/bin/sh -c \"while true; do etcdctl set /consul/bootstrap/machines/$(cat /etc/machine-id) $COREOS_PRIVATE_IPV4 --ttl 60; /usr/bin/docker exec consul consul join $(etcdctl get $(etcdctl ls /consul/bootstrap/machines | tail -1)); sleep 45; done\"\n",
	    "        ExecStop=/bin/sh -c \"/usr/bin/etcdctl rm /consul/bootstrap/machines/$(cat /etc/machine-id)\"\n",
	    "        [X-Fleet]\n",
	    "        MachineMetadata=consul_role=server\n",
	    "    - name: consul-server-registrator.service\n",
	    "      command: start\n",
	    "      content: |\n",
	    "        [Unit]\n",
	    "        Description=Registrator\n",
	    "        PartOf=consul-server.service\n",
	    "        After=consul-server.service\n",
	    "        [Service]\n",
	    "        Restart=always\n",
	    "        RestartSec=60\n",
	    "        ExecStartPre=-/usr/bin/docker kill registrator\n",
	    "        ExecStartPre=-/usr/bin/docker rm registrator\n",
	    "        ExecStartPre=/usr/bin/docker pull progrium/registrator\n",
	    "        ExecStart=/bin/sh -c \". /etc/environment; /usr/bin/docker run --name registrator -h registrator -v /var/run/docker.sock:/tmp/docker.sock  progrium/registrator consul://$COREOS_PRIVATE_IPV4:8500\"\n",
	    "        ExecStop=/usr/bin/docker stop registrator\n",
	    "        [X-Fleet]\n",
	    "        MachineMetadata=consul_role=server\n",
	    "    - name: consul-http-router.service\n",
	    "      command: start\n",
	    "      content: |\n",
	    "        [Unit]\n",
	    "        Description=consul-http-router\n",
	    "        \n",
	    "        [Service]\n",
	    "        PartOf=consul-server.service\n",
	    "        After=consul-server.service\n",
	    "        Restart=always\n",
	    "        RestartSec=10\n",
	    "        EnvironmentFile=/etc/environment\n",
	    "        ExecStartPre=-/usr/bin/docker kill consul-http-router\n",
	    "        ExecStartPre=-/usr/bin/docker rm consul-http-router\n",
	    "        ExecStart=/bin/sh -c \"/usr/bin/docker run --rm --name consul-http-router -p $COREOS_PRIVATE_IPV4:80:80 --dns 172.17.42.1 --dns-search=service.consul cargonauts/consul-http-router\"\n",
	    "        ExecStop=/usr/bin/docker stop consul-http-router\n"
            ] ]
          }
        }
      }
    },
    "CoreOSServerAutoScale": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": {"Fn::GetAZs": ""},
        "LaunchConfigurationName": {"Ref": "CoreOSServerLaunchConfig"},
        "LoadBalancerNames" : [ {"Ref": "AppLoadBalancer"} ],
        "MinSize": "1",
        "MaxSize": "12",
        "DesiredCapacity": {"Ref": "ClusterSize"},
        "Tags": [
            {"Key": "Name", "Value": { "Ref" : "AWS::StackName" }, "PropagateAtLaunch": true}
        ]
      }
    },
    "CoreOSServerLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
        "InstanceType": {"Ref": "InstanceType"},
        "KeyName": {"Ref": "KeyName"},
        "SecurityGroups": [{"Ref": "CoreOSSecurityGroup"}, {"Ref": "ConsulSecurityGroup"}, {"Ref": "AppSecurityGroup"} ],
        "UserData" : { "Fn::Base64":
          { "Fn::Join": [ "", [
            "#cloud-config\n\n",
            "coreos:\n",
            "  etcd:\n",
            "    discovery: ", { "Ref": "DiscoveryURL" }, "\n",
            "    addr: $", { "Ref": "AdvertisedIPAddress" }, "_ipv4:4001\n",
            "    peer-addr: $", { "Ref": "AdvertisedIPAddress" }, "_ipv4:7001\n",
            "  fleet:\n", 
            "    metadata: \"region=", { "Ref": "AWS::Region" }, ",consul_role=client\"\n",
            "  units:\n",
            "    - name: etcd.service\n",
            "      command: start\n",
            "    - name: fleet.service\n",
            "      command: start\n",
	    "    - name: consul-client.service\n",
	    "      command: start\n",
	    "      content: |\n",
	    "        [Unit]\n",
	    "        Description=Consul Client Agent\n",
	    "        After=docker.service\n",
	    "        After=etcd.service\n",
	    "        [Service]\n",
	    "        Restart=on-failure\n",
	    "        RestartSec=60\n",
	    "        EnvironmentFile=/etc/environment\n",
	    "        ExecStartPre=-/usr/bin/docker kill consul\n",
	    "        ExecStartPre=-/usr/bin/docker rm consul\n",
	    "        ExecStartPre=/usr/bin/docker pull progrium/consul\n",
	    "        ExecStart=/bin/sh -c \"/usr/bin/docker run --name consul -h $HOSTNAME -p $COREOS_PRIVATE_IPV4:8300:8300  -p $COREOS_PRIVATE_IPV4:8301:8301  -p $COREOS_PRIVATE_IPV4:8301:8301/udp  -p $COREOS_PRIVATE_IPV4:8302:8302  -p $COREOS_PRIVATE_IPV4:8302:8302/udp  -p $COREOS_PRIVATE_IPV4:8400:8400  -p $COREOS_PRIVATE_IPV4:8500:8500  -p 172.17.42.1:53:53/udp  -e SERVICE_IGNORE=true -v /var/run/docker.sock:/var/run/docker.sock progrium/consul  -advertise $COREOS_PRIVATE_IPV4 -retry-join $(etcdctl get $(etcdctl ls /consul/bootstrap/machines | tail -1))\"\n",
	    "        ExecStop=/usr/bin/docker stop consul\n",
	    "        [X-Fleet]\n",
	    "        MachineMetadata=consul_role=client\n",
	    "    - name: consul-client-registrator.service\n",
	    "      command: start\n",
	    "      content: |\n",
	    "        [Unit]\n",
	    "        Description=Registrator\n",
	    "        PartOf=consul-client.service\n",
	    "        After=consul-client.service\n",
	    "        [Service]\n",
	    "        Restart=on-failure\n",
	    "        ExecStartPre=-/usr/bin/docker kill registrator\n",
	    "        ExecStartPre=-/usr/bin/docker rm registrator\n",
	    "        ExecStartPre=/usr/bin/docker pull progrium/registrator\n",
	    "        ExecStart=/bin/sh -c \". /etc/environment; /usr/bin/docker run --name registrator -h registrator -v /var/run/docker.sock:/tmp/docker.sock  progrium/registrator consul://$COREOS_PRIVATE_IPV4:8500\"\n",
	    "        ExecStop=/usr/bin/docker stop registrator\n",
	    "        [X-Fleet]\n",
	    "        MachineMetadata=consul_role=client\n",
	    "    - name: consul-http-router.service\n",
	    "      command: start\n",
	    "      content: |\n",
	    "        [Unit]\n",
	    "        Description=consul-http-router\n",
	    "        [Service]\n",
	    "        PartOf=consul-client.service\n",
	    "        After=consul-client.service\n",
	    "        Restart=always\n",
	    "        RestartSec=10\n",
	    "        EnvironmentFile=/etc/environment\n",
	    "        ExecStartPre=-/usr/bin/docker kill consul-http-router\n",
	    "        ExecStartPre=-/usr/bin/docker rm consul-http-router\n",
	    "        ExecStart=/bin/sh -c \"/usr/bin/docker run --rm --name consul-http-router -p $COREOS_PRIVATE_IPV4:80:80 --dns 172.17.42.1 --dns-search=service.consul cargonauts/consul-http-router\"\n",
	    "        ExecStop=/usr/bin/docker stop consul-http-router\n"
            ] ]
          }
        }
      }
    }
  }
}
